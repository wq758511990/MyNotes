// 严格来讲，JavaScript 中没有私有成员的概念；所有对象属性都是公有的。不过，倒是有一个私有
// 变量的概念。任何在函数中定义的变量，都可以认为是私有变量，因为不能在函数的外部访问这些变量。
// 私有变量包括函数的参数、局部变量和在函数内部定义的其他函数。来看下面的例子：

function Person(name) {
    this.getName = function () {
        return name;
    };
    this.setName = function (value) {
        name = value;
    };
}

// 这两个方法都可以在构
// 造函数外部使用，而且都有权访问私有变量 name。但在 Person 构造函数外部，没有任何办法访问 name。
// 由于这两个方法是在构造函数内部定义的，它们作为闭包能够通过作用域链访问 name。私有变量 name
// 在 Person 的每一个实例中都不相同，因为每次调用构造函数都会重新创建这两个方法。不过，在构造函数中定义特权方法也有一个缺点，
// 那就是你必须使用构造函数模式来达到这个目的。第 6 章曾经讨论
// 过，构造函数模式的缺点是针对每个实例都会创建同样一组新方法，而使用静态私有变量来实现特权方
// 法就可以避免这个问题。
